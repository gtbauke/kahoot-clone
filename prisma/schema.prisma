// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgres"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    quizzes       Quiz[]
    questions     Question[]
    answers       Answer[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Quiz {
    id          String     @id @default(cuid())
    title       String
    description String
    questions   Question[]
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Question {
    id      String       @id @default(cuid())
    kind    QuestionKind
    text    String
    answers Answer[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    quiz   Quiz?   @relation(fields: [quizId], references: [id])
    quizId String?

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    @@unique([quizId, userId])
}

model Answer {
    id        String  @id @default(cuid())
    text      String
    isCorrect Boolean

    question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    questionId String

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([questionId, text])
}

enum QuestionKind {
    TEXT
    MULTIPLE_CHOICE
    MULTIPLE_ANSWER
}
